'use client';
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/MvvjHCGCCc1
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
import React, { useEffect, useRef, useState } from 'react';
import { Button } from '@/components/ui/button';
import { AvatarImage, AvatarFallback, Avatar } from '@/components/ui/avatar';

export function Conference() {
	const servers = {
		iceServers: [
			{
				urls: [
					'stun:stun1.l.google.com:19302',
					'stun:stun2.l.google.com:19302',
				],
			},
		],
		iceCandidatePoolSize: 10,
	};
	let pc = new RTCPeerConnection(servers);
	const [localStream, setLocalStream] = useState<MediaStream | null>(null);
	const [remoteStream, setRemoteStream] = useState<MediaStream | null>(null);
	const videoRef = useRef<HTMLVideoElement>(null);
	const remoteVideoRef = useRef<HTMLVideoElement>(null);
	const [isMicEnabled, setIsMicEnabled] = useState(false);
	const [isCameraEnabled, setIsCameraEnabled] = useState(false);

	useEffect(() => {
		navigator.mediaDevices
			.getUserMedia({ video: true, audio: true })
			.then((stream) => {
				setLocalStream(stream);
				let video = videoRef.current;
				if (video) {
					video.srcObject = stream;
				}
				stream.getVideoTracks().forEach((track) => {
					track.enabled = false;
				});
				stream.getAudioTracks().forEach((track) => {
					track.enabled = false;
				});

				pc.ontrack = (event) => {
					const newRemoteStream = new MediaStream();
					event.streams[0].getTracks().forEach((track) => {
						newRemoteStream.addTrack(track);
					});
					setRemoteStream(newRemoteStream);
				};
			})
			.catch((err) => {
				console.log('Something went wrong!', err);
			});
	}, []);
	const toggleCamera = () => {
		if (localStream) {
			localStream.getVideoTracks().forEach((track) => {
				track.enabled = !track.enabled;
			});
			setIsCameraEnabled(!isCameraEnabled);
		}
	};

	const toggleMic = () => {
		if (localStream) {
			localStream.getAudioTracks().forEach((track) => {
				track.enabled = !track.enabled;
			});
			setIsMicEnabled(!isMicEnabled);
		}
	};
	return (
		<div className='w-full h-screen bg-black flex items-center justify-center'>
			<div className='relative w-full h-full'>
				<div className='absolute top-0 left-0 w-full h-full flex items-center justify-center'>
					<div className=' w-11/12 h-[1000px] bg-gray-800 rounded-md flex items-center justify-center'>
						<video
							ref={videoRef}
							autoPlay
							className='w-full h-full object-cover rounded-md'
						/>
					</div>
				</div>
				<div className='absolute bottom-6 right-6 w-40 h-64 rounded-md overflow-hidden'>
					<div className='w-full h-full bg-gray-800 rounded-md flex items-center justify-center'>
						<video
							ref={remoteVideoRef}
							autoPlay
							className='w-full h-full object-cover rounded-md'
						/>
					</div>
				</div>
				<div className='absolute top-4 left-4 flex items-center space-x-2 text-white'>
					<Avatar>
						<AvatarImage
							alt='Caller'
							src='/placeholder-avatar.jpg'
						/>
						<AvatarFallback>JD</AvatarFallback>
					</Avatar>
					<div>
						<div className='font-medium'>John Doe</div>
						<div className='text-sm text-gray-400'>Calling...</div>
					</div>
				</div>
				<div className='absolute bottom-10 bg-gray-600 rounded-lg left-1/2 transform -translate-x-1/2 flex items-center justify-center text-white'>
					<Button
						onClick={toggleMic}
						className='m-2'
						size='icon'
						variant='ghost'>
						{isMicEnabled ? (
							<MicIcon className='w-5 h-5' />
						) : (
							<OffMicIcon className='w-5 h-5' />
						)}
						<span className='sr-only'>Mute</span>
					</Button>
					<Button
						onClick={toggleCamera}
						className='m-2'
						size='icon'
						variant='ghost'>
						{isCameraEnabled ? (
							<CameraIcon className='w-5 h-5' />
						) : (
							<OffCamIcon className='w-5 h-5' />
						)}
						<span className='sr-only'>Stop video</span>
					</Button>
					<Button
						className='bg-red-500 hover:bg-red-600 m-5'
						size='icon'
						variant='ghost'>
						<PhoneOffIcon className='w-5 h-5' />
						<span className='sr-only'>End Call</span>
					</Button>
				</div>
			</div>
		</div>
	);
}

function CameraIcon({ className, ...props }: { className?: string }) {
	return (
		<svg
			{...props}
			xmlns='http://www.w3.org/2000/svg'
			fill='none'
			viewBox='0 0 24 24'
			stroke-width='1.5'
			stroke='currentColor'
			className='w-6 h-6'>
			<path
				stroke-linecap='round'
				stroke-linejoin='round'
				d='m15.75 10.5 4.72-4.72a.75.75 0 0 1 1.28.53v11.38a.75.75 0 0 1-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 0 0 2.25-2.25v-9a2.25 2.25 0 0 0-2.25-2.25h-9A2.25 2.25 0 0 0 2.25 7.5v9a2.25 2.25 0 0 0 2.25 2.25Z'
			/>
		</svg>
	);
}

const OffCamIcon = ({ className, ...props }: { className?: string }) => {
	return (
		<svg
			xmlns='http://www.w3.org/2000/svg'
			fill='none'
			viewBox='0 0 24 24'
			strokeWidth={1.5}
			stroke='currentColor'
			className='w-6 h-6'>
			<path
				strokeLinecap='round'
				strokeLinejoin='round'
				d='m15.75 10.5 4.72-4.72a.75.75 0 0 1 1.28.53v11.38a.75.75 0 0 1-1.28.53l-4.72-4.72M12 18.75H4.5a2.25 2.25 0 0 1-2.25-2.25V9m12.841 9.091L16.5 19.5m-1.409-1.409c.407-.407.659-.97.659-1.591v-9a2.25 2.25 0 0 0-2.25-2.25h-9c-.621 0-1.184.252-1.591.659m12.182 12.182L2.909 5.909M1.5 4.5l1.409 1.409'
			/>
		</svg>
	);
};

const OffMicIcon = ({ className, ...props }: { className?: string }) => {
	return (
		<svg
			{...props}
			fill='currentColor'
			className='w-6 h-6'
			viewBox='0 0 56 56'
			xmlns='http://www.w3.org/2000/svg'>
			<path d='M 26.7110 6.8828 C 29.3594 6.8828 31.1172 9.0860 31.1172 11.8750 L 31.1172 23.1484 L 34.7031 26.7344 L 34.7031 11.9687 C 34.7031 7.0938 31.3984 3.4844 26.7110 3.4844 C 22.5157 3.4844 19.4453 6.3203 18.8594 10.1875 C 18.8359 10.3984 18.8125 10.7266 18.8125 10.8672 L 22.2813 14.2891 L 22.2813 11.8750 C 22.2813 9.0860 24.0625 6.8828 26.7110 6.8828 Z M 46.3281 47.3828 C 47.0313 48.0859 48.1797 48.0859 48.8594 47.3828 C 49.5859 46.7031 49.5859 45.5313 48.8594 44.8281 L 9.6719 5.6406 C 8.9688 4.9375 7.7735 4.9375 7.0938 5.6406 C 6.4141 6.3438 6.4141 7.5156 7.0938 8.1953 Z M 15.7657 48.9766 C 14.8281 48.9766 13.9844 49.8203 13.9844 50.7578 C 13.9844 51.6953 14.8281 52.5156 15.7657 52.5156 L 37.6328 52.5156 C 38.5703 52.5156 39.4141 51.6953 39.4141 50.7578 C 39.4141 49.8203 38.5703 48.9766 37.6328 48.9766 L 28.4688 48.9766 L 28.4688 43.8438 C 31.4453 43.5859 34.0469 42.625 36.1797 41.125 L 33.6719 38.6172 C 31.7735 39.8828 29.4062 40.6094 26.7110 40.6094 C 19.3516 40.6094 14.2188 35.3594 14.2188 28.2109 L 14.2188 22.7031 C 14.2188 21.7891 13.4219 20.9922 12.4844 20.9922 C 11.5703 20.9922 10.7735 21.7891 10.7735 22.7031 L 10.7735 28.2109 C 10.7735 36.7891 16.3984 43.0938 24.9297 43.8438 L 24.9297 48.9766 Z M 42.6250 22.7031 C 42.6250 21.7891 41.8281 20.9922 40.9141 20.9922 C 40.0000 20.9922 39.1797 21.7891 39.1797 22.7031 L 39.1797 28.2109 C 39.1797 29.1484 39.0859 30.0391 38.8984 30.9297 L 41.7578 33.7656 C 42.3203 32.0547 42.6250 30.2031 42.6250 28.2109 Z M 26.2422 36.2500 C 28.0703 36.2500 29.2891 35.8984 30.3438 35.2891 L 27.4610 32.4062 C 27.2266 32.6641 26.8750 32.8281 26.3125 32.8281 C 23.8516 32.8281 22.3281 31.1641 22.3281 28.7031 L 22.3281 27.2734 L 18.6953 23.6406 L 18.6953 28.2344 C 18.6953 33.6484 22.0000 36.2500 26.2422 36.2500 Z' />
		</svg>
	);
};

function MicIcon({ className, ...props }: { className?: string }) {
	return (
		<svg
			{...props}
			xmlns='http://www.w3.org/2000/svg'
			width='24'
			height='24'
			viewBox='0 0 24 24'
			fill='none'
			stroke='currentColor'
			strokeWidth='2'
			strokeLinecap='round'
			strokeLinejoin='round'>
			<path d='M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z' />
			<path d='M19 10v2a7 7 0 0 1-14 0v-2' />
			<line
				x1='12'
				x2='12'
				y1='19'
				y2='22'
			/>
		</svg>
	);
}
function PhoneOffIcon({ className, ...props }: { className?: string }) {
	return (
		<svg
			{...props}
			xmlns='http://www.w3.org/2000/svg'
			width='24'
			height='24'
			viewBox='0 0 24 24'
			fill='none'
			stroke='currentColor'
			strokeWidth='2'
			strokeLinecap='round'
			strokeLinejoin='round'>
			<path d='M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91' />
			<line
				x1='22'
				x2='2'
				y1='2'
				y2='22'
			/>
		</svg>
	);
}
